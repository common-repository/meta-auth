(()=>{"use strict";(()=>{class e{bind(t){const n=document.querySelectorAll(t),a=document.getElementById("loginform");n&&a?(a.addEventListener("submit",(t=>e.onLogin(t))),n.forEach((t=>t.addEventListener("click",(t=>e.onClick(t)))))):console.log("No login button found!")}static async connectWallet(e){if("phantom"===e)return this.connectSolanaWallet();const t=this.getWalletProvider(e);if(!t)throw new Error("The wallet extension is not installed. Please install it to continue!");"coinbase"==e||"wallet_connect"!=e&&1!=this.GetWindowSize()||await t.enable();var n=[];let a=[];const i=new ethers.providers.Web3Provider(t);try{(n=await i.listAccounts())[0]||(await i.send("eth_requestAccounts",[]).then((function(e){n=e})),a=await t.request({method:"personal_sign",params:[metaAuth.settings.signMessage,n[0]]}))}catch(e){throw console.log(e),new Error("Failed to connect your wallet!")}if(!window.ethers||!n[0])throw new Error("Service unavailable!");const s=ethers.utils.formatEther(await i.getBalance(n[0]));if(parseFloat(metaAuth.settings.min_balance||0)>s)throw new Error("Insufficient balance!");return{account:n[0],balance:s,signature:a,walletType:e}}static async onLogin(e){e.preventDefault();const t=document.getElementById("user_login"),n=document.getElementById("user_pass"),a=document.getElementById("rememberme");if(t.value&&n.value){this.userLogin=t.value,this.userPass=n.value,this.remember=a.checked;try{const e=await fetch(metaAuth.settings.ajaxURL,{method:"POST",body:new URLSearchParams({action:"meta_auth_validate_login_creds",user_login:this.userLogin,user_pass:this.userPass})}),t=await e.json();if(t.success&&t.isAdmin)return void window.location.reload();if(t.success){const e=this.getCookie("metaSessionId");if(e){const t={action:"meta_auth_skip_wallet",user_login:this.userLogin,user_pass:this.userPass,remember:this.remember,metaSessionId:e,link:window.location.href},n=await fetch(metaAuth.settings.ajaxURL,{method:"POST",body:new URLSearchParams(t)}),a=await n.json();if(a.success){this.notify("Successfully verified","green");const e=new URLSearchParams(window.location.search).get("redirect_to");window.location.href=e||a.message}else this.notify(metaAuth.i18n.failedConnect,"red")}else document.body.classList.add("meta-auth-showing")}else this.loginError(t.message,"red")}catch(e){this.loginError(e.message,"red")}}else this.loginError("Incorrect username or password!")}static getCookie(e){const t=`; ${document.cookie}`.split(`; ${e}=`);if(2===t.length)return t.pop().split(";").shift()}static async onClick(t){if(this.isLoading)return;this.isLoading=!0,this.notify(metaAuth.i18n.verifying,"normal");let n,a=t.currentTarget.dataset.wallet,i=document.getElementById("language-switcher-locales");const s=await ethereum.request({method:"eth_chainId"}),o=parseInt(s,16),r=networkInfo.symbols[o]??"Unkown";try{if(n=await this.connectWallet(a),n.action="meta_auth_login",n.user_login=e.userLogin,n.user_pass=e.userPass,n.remember=e.remember,n.link=window.location.href,n.ticker=r,networkInfo.testnets.includes(o)){this.notify("Please switch to mainnet.","red");try{await ethereum.request({method:"wallet_switchEthereumChain",params:[{chainId:"0x1"}]});const t=await fetch(metaAuth.settings.ajaxURL,{method:"POST",body:new URLSearchParams(n)});var c=(await t.json()).nonce;const a=n.account,i=n.balance,s=n.walletType;await this.sign_nonce(c,a,i,s,r,e)}catch(e){console.log(e)}return}}catch(e){return this.isLoading=!1,this.notify("Transaction failed, Please try again!","red"),void window.location.reload()}i&&i.value&&(n.language=i.value),n.action="meta_auth_login",n.user_login=e.userLogin,n.user_pass=e.userPass,n.remember=e.remember,n.link=window.location.href,n.ticker=r;try{const t=await fetch(metaAuth.settings.ajaxURL,{method:"POST",body:new URLSearchParams(n)}),a=await t.json();if(a.success){this.notify("Account connected successfully. Please sign with Nonce.","black"),c=a.nonce;const t=n.account,i=n.balance,s=n.walletType;await this.sign_nonce(c,t,i,s,r,e),this.isLoading=!1}else this.notify(metaAuth.i18n.failedConnect,"red")}catch(e){this.notify(metaAuth.i18n.failedConnect,"red")}}static ascii_to_hexa(e){for(var t=[],n=0,a=e.length;n<a;n++){var i=Number(e.charCodeAt(n)).toString(16);t.push(i)}return t.join("")}static getWalletProvider(e){let t=!1,n=this.GetWindowSize();switch(e){case"coinbase":t="undefined"!=typeof ethereum&&ethereum.providers?ethereum.providers.find((e=>e.isCoinbaseWallet)):!!window.ethereum&&ethereum;break;case"binance":1==n?t=this.GetWalletConnectObject():window.BinanceChain&&(t=window.BinanceChain);break;case"wallet_connect":t=this.GetWalletConnectObject();break;case"phantom":window.solana&&(t=window.solana);break;default:t=1==n?this.GetWalletConnectObject():"undefined"!=typeof ethereum&&ethereum.providers?ethereum.providers.find((e=>e.isMetaMask)):!!window.ethereum&&ethereum}return t}static isInfuraProjectId(){return!(!metaAuth.settings.infura_project_id||"undefined"===metaAuth.settings.infura_project_id||null===metaAuth.settings.infura_project_id||""===metaAuth.settings.infura_project_id)}static GetWindowSize(){return window.innerWidth<=500}static GetWalletConnectObject(){return new WalletConnectProvider.default({infuraId:metaAuth.settings.infura_project_id,rpc:{56:"https://bsc-dataseed.binance.org",97:"https://data-seed-prebsc-1-s1.binance.org:8545",137:"https://polygon-rpc.com",43114:"https://api.avax.network/ext/bc/C/rpc"}})}static async connectSolanaWallet(){if(!window.solana)throw new Error("The wallet extension is not installed. Please install it to continue!");let e,t,n=(new TextEncoder).encode(metaAuth.settings.signMessage);try{e=await solana.connect(),t=e.publicKey.toString()}catch(e){throw new Error(metaAuth.i18n.failedConnect)}const a=await solana.signMessage(n,"utf8");if(!window.solanaWeb3||!t)throw new Error("Service unavailable!");const i=new solanaWeb3.Connection(solanaWeb3.clusterApiUrl("mainnet-beta"),"confirmed"),s=await i.getBalance(e.publicKey);if(parseFloat(metaAuth.settings.min_balance||0)>s)throw new Error("Insufficient balance!");return{account:t,balance:s,signature:a,walletType:"phamtom"}}static notify(e,t="red"){const n=document.getElementById("notice-message");n&&(n.className="",!n.classList.contains(t)&&n.classList.add(t),n.textContent=e)}static loginError(e){const t=document.createElement("p"),n=document.getElementById("loginform");t.style="text-align:center;color:#dc3232",t.textContent=e,n.before(t),setTimeout((()=>t.remove()),6400)}static async sign_nonce(e,t,n,a,i,s){const o=`I am signing my one-time nonce: ${e}`,r=this.ascii_to_hexa(o);try{const e=await ethereum.request({method:"personal_sign",params:[r,t,"Example password"]}),o=await fetch(metaAuth.settings.ajaxURL,{method:"POST",body:new URLSearchParams({balance:n,user_login:s.userLogin,user_pass:s.userPass,remember:s.remember,walletType:a,action:"meta_auth_verify",clientUrl:window.location.href,ticker:i,address:t,signature:e})}),c=await o.json();if(c.success){this.notify("Successfully verified","green");const e=new URLSearchParams(window.location.search).get("redirect_to");window.location.href=e||c.message}else this.notify(metaAuth.i18n.failedConnect,"red")}catch(e){this.notify("Transaction failed, Please try again!","red"),window.location.reload()}}}class t{constructor(e,t,n=4e3){this.loaded=!1,this.loading=!1,this.timeout=n,this.lazyScripts=t,this.triggerEvents=e,this.eventCallback=this.load.bind(this)}init(e){setTimeout((()=>{this.loaded||this.loading||this.load()}),this.timeout),window.addEventListener("zzzScriptsLoaded",(()=>this.onLoaded(e))),this.triggerEvents.forEach((t=>window.addEventListener(t,e.eventCallback))),this.lazyScripts.forEach((e=>e.preload&&this.preloadScript(e)))}load(){this.loaded||this.loading||(this.loading=!0,this.lazyScripts.forEach((e=>this.appendScript(e))),this.loaded=!0,this.loading=!1,window.dispatchEvent(new Event("zzzScriptsLoaded")))}onLoaded(e){this.triggerEvents.forEach((t=>window.removeEventListener(t,e.eventCallback))),console.log("Lazy scripts loaded successfully!")}preloadScript(e){if(!e.id||document.getElementById(e.id))return;const t=document.createElement("link");t.id=e.id,t.as="script",t.rel="preload",e.version?t.href=e.uri+"?ver="+e.ver:t.href=e.uri,document.head.append(t)}appendScript(e){const t=document.createElement("script");t.src=e.uri,e.version&&(t.src+="?ver="+e.ver),e.type?t.type=e.type:t.type="text/javascript",document.body.append(t)}}window.addEventListener("DOMContentLoaded",(()=>{const n=new e,a=new t(["load","keydown","mousemove","touchmove","touchstart","touchend","wheel"],[{id:"ethers",uri:metaAuth.settings.pluginURI+"assets/js/vendor/ethers.min.js"},{id:"solana",uri:metaAuth.settings.pluginURI+"assets/js/vendor/solana.min.js"},{id:"wallet_connect",uri:metaAuth.settings.pluginURI+"assets/js/vendor/walletconnect.js"}]);n.bind(".metaAuthLoginBtn"),a.init(a)}))})()})();